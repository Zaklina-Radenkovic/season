{"version":3,"sources":["SeasonDisplay.js","Spinner.js","index.js"],"names":["seasonConfig","summer","text","iconName","winter","SeasonDisplay","season","lat","month","getSeason","Date","getMonth","className","Spinner","props","message","App","state","errorMessage","contentDisplay","window","navigator","geolocation","getCurrentPosition","position","setState","coords","latitude","err","console","log","this","React","Component","ReactDOM","render","document","querySelector"],"mappings":"4MAGMA,EAAe,CAEnBC,OAAQ,CACNC,KAAM,yBACNC,SAAU,OAEZC,OAAQ,CACNF,KAAM,qBACNC,SAAU,cAsCCE,EA1BO,SAAC,GAAa,IAC5BC,EATU,SAACC,EAAKC,GACtB,OAAIA,EAAQ,GAAKA,EAAQ,EAChBD,EAAM,EAAI,SAAW,SAErBA,EAAM,EAAI,SAAW,SAKfE,CADkB,EAAVF,KACO,IAAIG,MAAOC,YAUzC,EAA2BX,EAAaM,GAAhCJ,EAAR,EAAQA,KAAMC,EAAd,EAAcA,SAEd,OAEE,cADA,CACA,OAAKS,UAAS,yBAAoBN,GAAlC,UAIE,mBAAGM,UAAS,4BAAuBT,EAAvB,WACZ,6BAAKD,IACL,mBAAGU,UAAS,6BAAwBT,EAAxB,eC/BHU,EAXC,SAACC,GACf,OACE,qBAAKF,UAAU,mBAAf,SACE,qBAAKA,UAAU,qBAAf,SAAqCE,EAAMC,SAAW,kBCAtDC,E,4MASJC,MAAQ,CAAEV,IAAK,KAAMW,aAAc,I,EA0BnCC,eAAiB,WACf,OAAI,EAAKF,MAAMC,eAAiB,EAAKD,MAAMV,IAClC,sBAAKK,UAAU,GAAf,oBAA0B,EAAKK,MAAMC,iBAGzC,EAAKD,MAAMC,cAAgB,EAAKD,MAAMV,IAClC,cAAC,EAAD,CAAeA,IAAK,EAAKU,MAAMV,MAGjC,cAAC,EAAD,CAASQ,QAAQ,qC,uDAnB1B,WAAqB,IAAD,OAClBK,OAAOC,UAAUC,YAAYC,oBAC3B,SAACC,GAAD,OAAc,EAAKC,SAAS,CAAElB,IAAKiB,EAASE,OAAOC,cACnD,SAACC,GAAD,OAAS,EAAKH,SAAS,CAAEP,aAAcU,EAAIb,e,gCAG/C,WACEc,QAAQC,IAAI,2C,oBAed,WACE,OAAO,mCAAGC,KAAKZ,uB,GAhDDa,IAAMC,WAoDxBC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,cAAc,Y","file":"static/js/main.33477c07.chunk.js","sourcesContent":["import React from 'react'\r\nimport './SeasonDisplay.css'\r\n\r\nconst seasonConfig = {\r\n  //names 'summer' and 'winter' must be the same as we define them in our func getSeason\r\n  summer: {\r\n    text: 'Let`s get to the beach',\r\n    iconName: 'sun',\r\n  },\r\n  winter: {\r\n    text: 'Brrr, it`s chilly!',\r\n    iconName: 'snowflake',\r\n  },\r\n}\r\n\r\nconst getSeason = (lat, month) => {\r\n  if (month > 2 && month < 9) {\r\n    return lat > 0 ? 'summer' : 'winter'\r\n  } else {\r\n    return lat > 0 ? 'winter' : 'summer'\r\n  }\r\n}\r\n\r\nconst SeasonDisplay = ({ lat }) => {\r\n  const season = getSeason(lat, new Date().getMonth())\r\n  // console.log(season)\r\n\r\n  //   const text =\r\n  //     season === 'summer' ? 'Let`s get to the beach' : 'Brrr, it`s chilly!'\r\n  //   //setting conditionally class\r\n  //   const icon = season === 'summer' ? 'sun' : 'snowflake'\r\n  //INSTEAD of all this up we will configure an object\r\n\r\n  //Now we will destructure our object\r\n  const { text, iconName } = seasonConfig[season]\r\n\r\n  return (\r\n    //   season returns string: winter or summer so we can use it in CSS\r\n    <div className={`season-display ${season}`}>\r\n      {/* One way it is to put logic inside of JSX\r\n      {season === 'summer' ? 'Let`s get to the beach' : 'Brrr, it`s chilly!'} */}\r\n      {/* , another it is to put in variable */}\r\n      <i className={`icon-left massive ${iconName} icon`}></i>\r\n      <h1>{text}</h1>\r\n      <i className={`icon-right massive ${iconName} icon`}></i>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SeasonDisplay\r\n","import React from 'react'\r\n\r\nconst Spinner = (props) => {\r\n  return (\r\n    <div className='ui active dimmer'>\r\n      <div className='ui big text loader'>{props.message || 'Loading...'}</div>\r\n    </div>\r\n  )\r\n}\r\n//Or we can create defalut props object\r\n// Spinner.defaultProps = {\r\n//     message: 'Loading...'\r\n// }\r\nexport default Spinner\r\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport SeasonDisplay from './SeasonDisplay'\nimport Spinner from './Spinner'\n\nclass App extends React.Component {\n  //initiallizing state within constructor\n  // constructor(props) {\n  //   super(props)\n  //   //this.state = {} // this is state object that is going to contain some properties that are relevant and important to our component\n  //   this.state = { lat: null, errorMessage: '' }\n  // }\n\n  //ANOTHER WAY  OF INITIALIZING STATE (out of constructor)\n  state = { lat: null, errorMessage: '' }\n\n  // componentDidMount() {\n  //   //console.log('Component was renderd to the screen')\n  //   window.navigator.geolocation.getCurrentPosition(\n  //     (position) =>\n  //       // console.log(position),\n  //       //we call setState to update state\n  //       this.setState({ lat: position.coords.latitude }),\n  //     (err) =>\n  //       // console.log(err)\n  //       this.setState({ errorMessage: err.message })\n  //   )\n  // }\n\n  //short version\n  componentDidMount() {\n    window.navigator.geolocation.getCurrentPosition(\n      (position) => this.setState({ lat: position.coords.latitude }),\n      (err) => this.setState({ errorMessage: err.message })\n    )\n  }\n  componentDidUpdate() {\n    console.log('Component was just updated - rendered')\n  }\n\n  contentDisplay = () => {\n    if (this.state.errorMessage && !this.state.lat) {\n      return <div className=''>Error: {this.state.errorMessage}</div>\n    }\n\n    if (!this.state.errorMessage && this.state.lat) {\n      return <SeasonDisplay lat={this.state.lat} />\n    }\n\n    return <Spinner message='Please, accept location request' />\n  }\n\n  render() {\n    return <>{this.contentDisplay()}</>\n  }\n}\n\nReactDOM.render(<App />, document.querySelector('#root'))\n"],"sourceRoot":""}